# Generated by Django 4.2.14 on 2024-07-15 12:17

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        max_length=255,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone Number must start with '+' followed by 11 to 14 digits",
                                regex="^\\+\\d{11,14}$",
                            )
                        ],
                    ),
                ),
                (
                    "credit_card_number",
                    models.CharField(
                        max_length=19,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Credit Card Number must be between 13 and 19 digits",
                                regex="^\\d{13,19}$",
                            )
                        ],
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="TrainOperator",
            fields=[
                (
                    "operator_code",
                    models.CharField(max_length=10, primary_key=True, serialize=False),
                ),
                ("operator_name", models.CharField(max_length=100)),
                ("headquarters_location", models.CharField(max_length=100)),
                ("username", models.CharField(max_length=50)),
                ("password", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="TrainStation",
            fields=[
                (
                    "station_code",
                    models.CharField(max_length=10, primary_key=True, serialize=False),
                ),
                ("station_name", models.CharField(max_length=100)),
                ("city", models.CharField(max_length=100)),
                ("country", models.CharField(max_length=100)),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                ("time_zone", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="TrainJourney",
            fields=[
                (
                    "journey_number",
                    models.CharField(max_length=20, primary_key=True, serialize=False),
                ),
                ("date", models.DateField()),
                ("departure_time_local", models.TimeField()),
                ("arrival_time_local", models.TimeField()),
                ("remaining_tickets", models.IntegerField()),
                (
                    "journey_status",
                    models.CharField(
                        choices=[
                            ("SCHEDULED", "Scheduled"),
                            ("CANCELLED", "Cancelled"),
                            ("COMPLETED", "Completed"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "destination_station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="journeys_to",
                        to="ticket_management.trainstation",
                    ),
                ),
                (
                    "origin_station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="journeys_from",
                        to="ticket_management.trainstation",
                    ),
                ),
                (
                    "train_operator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ticket_management.trainoperator",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "ticket_id",
                    models.CharField(max_length=20, primary_key=True, serialize=False),
                ),
                (
                    "class_type",
                    models.CharField(
                        choices=[
                            ("ECONOMY", "Economy"),
                            ("FIRST", "First"),
                            ("BUSINESS", "Business"),
                        ],
                        max_length=10,
                    ),
                ),
                ("seat_number", models.CharField(max_length=10)),
                (
                    "booking_status",
                    models.CharField(
                        choices=[
                            ("BOOKED", "Booked"),
                            ("CANCELLED", "Cancelled"),
                            ("CONFIRMED", "Confirmed"),
                            ("CHECKED_IN", "Checked In"),
                            ("COMPLETED", "Completed"),
                            ("PENDING", "Pending"),
                        ],
                        max_length=20,
                    ),
                ),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "custom_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "train_journey",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ticket_management.trainjourney",
                    ),
                ),
            ],
        ),
    ]
